generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  address          String           @unique @map("wallet_address")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  ens              String?
  avatar           String?
  email            String?
  twitter          String?
  discord          String?
  mintRecords      MintRecord[]
  sessions         Session[]
  signatures       Signature[]
  whitelistEntries WhitelistEntry[]

  @@map("users")
}

model WhitelistEntry {
  id           String     @id @default(cuid())
  userId       String     @map("user_id")
  collectionId String     @map("collection_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  signatureId  String?    @map("signature_id")
  source       String?
  tier         String     @default("standard")
  signature    Signature? @relation(fields: [signatureId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectionId])
  @@map("whitelist_entries")
}

model Collection {
  id               String           @id @default(cuid())
  name             String           @unique
  displayName      String           @map("display_name")
  description      String?
  maxSupply        Int?             @map("max_supply")
  mintPrice        String?          @map("mint_price")
  mintStart        DateTime?        @map("mint_start")
  mintEnd          DateTime?        @map("mint_end")
  whitelistOnly    Boolean          @default(true) @map("whitelist_only")
  isActive         Boolean          @default(true) @map("is_active")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  mintRecords      MintRecord[]
  whitelistEntries WhitelistEntry[]

  @@map("collections")
}

model Signature {
  id               String           @id @default(cuid())
  userId           String           @map("user_id")
  message          String
  signature        String
  createdAt        DateTime         @default(now()) @map("created_at")
  purpose          String
  ipAddress        String?          @map("ip_address")
  userAgent        String?          @map("user_agent")
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  whitelistEntries WhitelistEntry[]

  @@map("signatures")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  isActive  Boolean  @default(true) @map("is_active")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model MintRecord {
  id           String     @id @default(cuid())
  userId       String     @map("user_id")
  collectionId String     @map("collection_id")
  tokenId      String?    @map("token_id")
  txHash       String?    @map("tx_hash")
  amount       Int        @default(1)
  price        String?
  createdAt    DateTime   @default(now()) @map("created_at")
  mintedAt     DateTime?  @map("minted_at")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mint_records")
}
